
import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { CheckCircle, Clock, AlertCircle, Loader2, Eye, X, Download, Copy, ExternalLink } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";

interface PublishingProgressProps {
  status: 'idle' | 'starting' | 'logging_in' | 'uploading' | 'publishing' | 'success' | 'error';
  progress: number;
  message: string;
  error?: string;
  screenshots?: string[];
  postContent?: {
    caption: string;
    hashtags: string;
    imageUrl?: string;
  };
}

const PublishingProgress = ({ 
  status, 
  progress, 
  message, 
  error, 
  screenshots = [],
  postContent
}: PublishingProgressProps) => {
  const [showScreenshots, setShowScreenshots] = useState(false);
  const [selectedScreenshot, setSelectedScreenshot] = useState<string | null>(null);
  const { toast } = useToast();

  const getStatusIcon = () => {
    switch (status) {
      case 'success':
        return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'error':
        return <AlertCircle className="h-5 w-5 text-red-600" />;
      case 'idle':
        return <Clock className="h-5 w-5 text-gray-400" />;
      default:
        return <Loader2 className="h-5 w-5 text-blue-600 animate-spin" />;
    }
  };

  const getStatusColor = () => {
    switch (status) {
      case 'success':
        return 'border-green-200 bg-green-50';
      case 'error':
        return 'border-orange-200 bg-orange-50'; // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      case 'idle':
        return 'border-gray-200 bg-gray-50';
      default:
        return 'border-blue-200 bg-blue-50';
    }
  };

  const getDetailedMessage = () => {
    switch (status) {
      case 'starting':
        return '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...';
      case 'logging_in':
        return '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...';
      case 'uploading':
        return '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã...';
      case 'publishing':
        return '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...';
      case 'success':
        return '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Instagram!';
      case 'error':
        return message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
      default:
        return message;
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const copyFullContent = () => {
    if (postContent) {
      const fullText = `${postContent.caption}\n\n${postContent.hashtags}`;
      copyToClipboard(fullText);
    }
  };

  const copyCaption = () => {
    if (postContent?.caption) {
      copyToClipboard(postContent.caption);
    }
  };

  const copyHashtags = () => {
    if (postContent?.hashtags) {
      copyToClipboard(postContent.hashtags);
    }
  };

  const openInstagram = () => {
    window.open('https://www.instagram.com', '_blank');
  };

  if (status === 'idle') return null;

  return (
    <>
      <Card className={`${getStatusColor()} border`}>
        <CardContent className="p-4">
          <div className="flex items-center gap-3 mb-3">
            {getStatusIcon()}
            <div className="flex-1">
              <span className="font-medium text-sm">{getDetailedMessage()}</span>
              {status !== 'success' && status !== 'error' && (
                <div className="text-xs text-gray-600 mt-1">
                  –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ...
                </div>
              )}
            </div>
          </div>
          
          {status !== 'success' && status !== 'error' && (
            <div className="mb-3">
              <Progress value={progress} className="w-full mb-2" />
              <div className="text-xs text-gray-600 text-center">
                {progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
              </div>
            </div>
          )}

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –æ–Ω –µ—Å—Ç—å */}
          {postContent && (
            <div className="mb-4 p-4 bg-white rounded-lg border-2 border-dashed border-orange-300">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-2">
                  <Copy className="h-4 w-4 text-orange-600" />
                  <span className="font-medium text-orange-800">–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</span>
                </div>
                <Button 
                  size="sm" 
                  variant="outline" 
                  onClick={copyFullContent}
                  className="h-7 text-xs border-orange-300 text-orange-700 hover:bg-orange-100"
                >
                  <Copy className="h-3 w-3 mr-1" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë
                </Button>
              </div>
              
              {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
              <div className="mb-3">
                <div className="flex items-center justify-between mb-1">
                  <span className="text-xs font-medium text-gray-700">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={copyCaption}
                    className="h-5 text-xs px-2 text-gray-600 hover:text-gray-800"
                  >
                    <Copy className="h-2 w-2 mr-1" />
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
                <div className="text-sm bg-gray-50 p-2 rounded border max-h-24 overflow-y-auto">
                  {postContent.caption}
                </div>
              </div>

              {/* –•–µ—à—Ç–µ–≥–∏ */}
              <div className="mb-3">
                <div className="flex items-center justify-between mb-1">
                  <span className="text-xs font-medium text-gray-700">–•–µ—à—Ç–µ–≥–∏:</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={copyHashtags}
                    className="h-5 text-xs px-2 text-gray-600 hover:text-gray-800"
                  >
                    <Copy className="h-2 w-2 mr-1" />
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
                <div className="text-sm bg-blue-50 p-2 rounded border text-blue-700">
                  {postContent.hashtags}
                </div>
              </div>

              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
              {postContent.imageUrl && (
                <div>
                  <span className="text-xs font-medium text-gray-700 block mb-1">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
                  <img 
                    src={postContent.imageUrl} 
                    alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞"
                    className="w-full max-w-xs rounded border cursor-pointer hover:opacity-80 transition-opacity"
                    onClick={() => window.open(postContent.imageUrl, '_blank')}
                  />
                  <p className="text-xs text-gray-500 mt-1">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ</p>
                </div>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex gap-2 mb-3 flex-wrap">
            {screenshots.length > 0 && (
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => setShowScreenshots(true)}
                className="text-xs"
              >
                <Eye className="h-3 w-3 mr-1" />
                –°–∫—Ä–∏–Ω—à–æ—Ç—ã ({screenshots.length})
              </Button>
            )}
            
            {status === 'error' && postContent && (
              <Button 
                size="sm" 
                variant="default" 
                onClick={openInstagram}
                className="text-xs bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
              >
                <ExternalLink className="h-3 w-3 mr-1" />
                –û—Ç–∫—Ä—ã—Ç—å Instagram
              </Button>
            )}
          </div>
          
          {error && (
            <div className="text-orange-700 text-xs bg-orange-100 p-3 rounded border-orange-200 border">
              <div className="font-medium mb-1">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</div>
              <div className="mb-2">{error}</div>
              <div className="text-orange-600 font-medium">
                1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ö–µ—à—Ç–µ–≥–∏ –≤—ã—à–µ<br/>
                2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br/>
                3. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç
              </div>
            </div>
          )}

          {status === 'success' && (
            <div className="text-green-600 text-xs bg-green-100 p-3 rounded">
              <div className="font-medium mb-1">‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</div>
              <div>–ü–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ –≤–∞—à–µ–º Instagram –ø—Ä–æ—Ñ–∏–ª–µ</div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ */}
      <Dialog open={showScreenshots} onOpenChange={setShowScreenshots}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>–°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</DialogTitle>
          </DialogHeader>
          
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {screenshots.map((screenshot, index) => (
              <div 
                key={index}
                className="cursor-pointer border rounded overflow-hidden hover:shadow-lg transition-shadow"
                onClick={() => setSelectedScreenshot(screenshot)}
              >
                <img 
                  src={screenshot} 
                  alt={`–°–∫—Ä–∏–Ω—à–æ—Ç ${index + 1}`}
                  className="w-full h-32 object-cover"
                />
                <div className="p-2 text-xs text-center text-gray-600">
                  –®–∞–≥ {index + 1}
                </div>
              </div>
            ))}
          </div>
        </DialogContent>
      </Dialog>

      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ */}
      <Dialog open={!!selectedScreenshot} onOpenChange={() => setSelectedScreenshot(null)}>
        <DialogContent className="max-w-6xl max-h-[90vh] p-0">
          <div className="relative">
            <Button
              variant="outline"
              size="sm"
              className="absolute top-2 right-2 z-10"
              onClick={() => setSelectedScreenshot(null)}
            >
              <X className="h-4 w-4" />
            </Button>
            {selectedScreenshot && (
              <img 
                src={selectedScreenshot} 
                alt="–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                className="w-full h-auto max-h-[85vh] object-contain"
              />
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default PublishingProgress;
